buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.anatawa12:compile-time-constant:1.0.1'
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    tasks.withType(Jar) {
        compileJava.options.encoding = 'UTF-8'
    }
}

apply plugin: 'forge'
apply plugin: 'com.anatawa12.compile-time-constant'

version = "$VERSION"
group = "com.github.yuitosaito.enigma"
archivesBaseName = "Enigma"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "run"
}

runClient {
    args '--username', 'yuito_3110'
    jvmArgs = ['-Dfml.coreMods.load=com.github.yuitosaito.enigma.asm.EGCorePlugin']
}

createCompileTimeConstant {
    constantsClass = "com.github.yuitosaito.enigma.Constants"
    values version: version.toString()
}

//manifestファイルの書き込みをビルドに追加する。これにより、coremodの読み込みが可能になる。
//なお、テスト起動時にはこのオプションが効かないためVMオプションに以下の引数を追加する。
//-Dfml.coreMods.load=alcore.asm.ALCorePlugin
jar {
    manifest {
        attributes FMLCorePlugin: 'com.github.yuitosaito.enigma.asm.EGCorePlugin'
        attributes FMLCorePluginContainsFMLMod: 'true'
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
